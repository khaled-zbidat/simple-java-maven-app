name: CI/CD Pipeline

# Trigger the workflow on push to main branch
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Necessary for versioning plugins that use Git history

      # Step 2: Set up JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # You can choose other distributions like 'adopt'
          java-version: '11'

      # Step 3: Bump PATCH version using Maven Versions Plugin
      - name: Bump PATCH Version
        id: bump_version
        run: |
          # Extract current version from pom.xml
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          
          echo "Current version: $CURRENT_VERSION"
          
          # Split version into MAJOR, MINOR, PATCH
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Increment PATCH
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "New version: $NEW_VERSION"
          
          # Set new version using Maven Versions Plugin
          mvn versions:set -DnewVersion=$NEW_VERSION
          mvn versions:commit
          
          # Output the new version for later steps
          echo "::set-output name=new_version::$NEW_VERSION"

      # Step 4: Configure Git for committing changes
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Step 5: Commit and push version changes
      - name: Commit and Push Version Bump
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add pom.xml
          git commit -m "Bump PATCH version to ${{ steps.bump_version.outputs.new_version }}"
          git push origin main

      # Step 6: Build Maven project
      - name: Build with Maven
        run: mvn clean install

      # Step 7: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 8: Build Docker image
      - name: Build Docker Image
        run: |
          # Define image name and tag
          IMAGE_NAME=your-dockerhub-username/your-repo-name
          IMAGE_TAG=${{ steps.bump_version.outputs.new_version }}
          
          echo "Building Docker image $IMAGE_NAME:$IMAGE_TAG"
          
          # Build the Docker image
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          
          # Optionally, tag as latest
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest

      # Step 9: Push Docker image to Docker Hub
      - name: Push Docker Image
        run: |
          IMAGE_NAME=your-dockerhub-username/your-repo-name
          IMAGE_TAG=${{ steps.bump_version.outputs.new_version }}
          
          echo "Pushing Docker image $IMAGE_NAME:$IMAGE_TAG"
          
          # Push the specific version
          docker push $IMAGE_NAME:$IMAGE_TAG
          
          # Push the latest tag
          docker push $IMAGE_NAME:latest
